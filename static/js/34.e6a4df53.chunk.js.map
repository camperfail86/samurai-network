{"version":3,"file":"static/js/34.e6a4df53.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/main/profile/profile.module.css?0490","components/main/profile/profileStatus/ProfileStatus.tsx","components/main/profile/profile.tsx","components/main/profile/ProfileContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"title\":\"profile_title__7eb2o\",\"avatar\":\"profile_avatar__Cd9+Y\",\"profile\":\"profile_profile__kLVrR\",\"status\":\"profile_status__bQUxX\",\"avatarAndName\":\"profile_avatarAndName__bHQOi\",\"link\":\"profile_link__RTO8F\",\"icon\":\"profile_icon__Eon7v\",\"infoSocial\":\"profile_infoSocial__OWWK+\"};","import React, {ChangeEvent, useEffect, useState} from 'react';\nimport {useDispatch} from \"react-redux\";\nimport { setStatusUserTC} from \"../../../../reducers/profileReducer\";\nimport s from \"../profile.module.css\"\n\ntype ProfileType = {\n    id: number\n    mainStatus: string | null\n}\n\nexport const ProfileStatus = ({id, mainStatus}: ProfileType) => {\n    const [editMode, setEditMode] = useState(false)\n    // const mainStatus = useSelector(statusSelector)\n    const [status, setStatus] = useState(mainStatus)\n    const dispatch = useDispatch()\n\n    const activateEditMode = () => {\n        setEditMode(true)\n    }\n\n    const disActivateEditMode = () => {\n        setEditMode(false)\n        dispatch(setStatusUserTC(status))\n    }\n\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\n        setStatus(e.currentTarget.value)\n    }\n\n    useEffect(() => {\n        setStatus(mainStatus)\n    }, [mainStatus]);\n\n    return (\n        <div className={s.profile}>\n            <span className={s.status}>Статус:</span>\n            {!editMode ?\n                <div>\n                        <span onDoubleClick={activateEditMode}>\n                            {mainStatus || '-'}\n                        </span>\n                </div>\n                :\n                <div>\n                    <input onChange={onStatusChange}\n                           autoFocus={true} value={'' + status}\n                           onBlur={disActivateEditMode}\n                           type=\"text\"/>\n                </div>\n            }\n        </div>\n    );\n};","import s from './profile.module.css';\r\nimport React, {useEffect} from 'react';\r\nimport {postsReducerAC} from \"../../../reducers/postsReducer\";\r\nimport {getStatusUserTC, ProfileType, setStatusUserTC} from \"../../../reducers/profileReducer\";\r\nimport {ProfileStatus} from \"./profileStatus/ProfileStatus\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppDispatchType} from \"../../../redux/redux-store\";\r\nimport {useForm} from \"react-hook-form\";\r\nimport {postsSelector} from \"../../../selectors/selectors\";\r\nimport lostImage from \"../../../img/anonim.jpeg\";\r\nimport vk from \"../../../img/icons8-vk-48.png\"\r\nimport gh from \"../../../img/github-icon.png\"\r\n\r\nexport type ProfilePropsType = {\r\n    profile: ProfileType\r\n    userId: number\r\n}\r\n\r\nexport function Profile({userId, profile}: ProfilePropsType) {\r\n\r\n    const posts = useSelector(postsSelector)\r\n    const dispatch = useDispatch<AppDispatchType>()\r\n\r\n    useEffect(() => {\r\n        dispatch(getStatusUserTC(userId))\r\n    }, []);\r\n\r\n    // const onClickHandler = () => {\r\n    //       if (newPostElement.current) {\r\n    //             let text = newPostElement.current.value\r\n    //             props.dispatch(postsReducerAC(text))\r\n    //             newPostElement.current.value = ''\r\n    //         }\r\n    // }\r\n\r\n    const {formState: {errors}, register, handleSubmit} = useForm(\r\n        {\r\n            defaultValues: {\r\n                newPostElement: '',\r\n            },\r\n        }\r\n    )\r\n    const onSubmit = (data: any) => {\r\n        console.log(data)\r\n        if (data.newPostElement) {\r\n            dispatch(postsReducerAC(data.newPostElement))\r\n            data.newPostElement = ''\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className={s.title}>\r\n                ПРОФИЛЬ\r\n            </div>\r\n            <div>\r\n                {profile\r\n                    ? <>\r\n                        <div className={s.avatarAndName}>\r\n                            <img className={s.avatar} src={profile.photos.large ? profile.photos.large : lostImage}\r\n                                 alt=\"\"/>\r\n                            <span>{profile.fullName}</span>\r\n                        </div>\r\n                        <ProfileStatus mainStatus={profile.status} id={profile.userId}/>\r\n                        {profile.contacts.vk &&\r\n                          <div className={s.infoSocial}>\r\n                            <img className={s.icon} src={vk} alt=\"\"/>\r\n                            <a className={s.link} href={profile.contacts.vk}>{profile.contacts.vk}</a>\r\n                          </div>\r\n                        }\r\n                        {profile.contacts.github &&\r\n                          <div className={s.infoSocial}>\r\n                            <img className={s.icon} src={gh} alt=\"\"/>\r\n                            <a className={s.link} href={profile.contacts.github}>{profile.contacts.github}</a>\r\n                          </div>\r\n                        }\r\n                    </>\r\n                    : <div className={s.loader}></div>}\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\n{/*<Posts posts={posts}/>*/\r\n}\r\n{/*<div>*/\r\n}\r\n{/*    <form onSubmit={handleSubmit(onSubmit)}>*/\r\n}\r\n{/*        <textarea {...register('newPostElement', {*/\r\n}\r\n{/*            validate: (value: any) => {*/\r\n}\r\n{/*                if (value.length < 5) {*/\r\n}\r\n{/*                    return 'login must be more than 6 characters'*/\r\n}\r\n{/*                }*/\r\n}\r\n{/*            }*/\r\n}\r\n{/*        })}></textarea>*/\r\n}\r\n{/*        /!*<input type='submit' value='Добавить пост'/>*!/*/\r\n}\r\n{/*        /!*<span> {errors.newPostElement && <span>{errors.newPostElement.message}</span>}</span>*!/*/\r\n}\r\n{/*    </form>*/\r\n}\r\n{/*</div>*/\r\n}","import React, {useEffect} from 'react';\nimport {Profile} from \"./profile\";\nimport {getStatusUserTC, getUserProfileInfoTC} from \"../../../reducers/profileReducer\";\nimport {AppDispatchType, AppStateType} from \"../../../redux/redux-store\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {\n    Navigate,\n    useLocation,\n    useNavigate,\n    useParams,\n} from \"react-router-dom\";\nimport {compose} from \"redux\";\nimport {profileSelector} from \"../../../selectors/selectors\";\n\nexport interface WithRouterProps {\n    location: ReturnType<typeof useLocation>;\n    params: Record<string, string>;\n    navigate: ReturnType<typeof useNavigate>;\n}\n\nconst ProfileContainer = React.memo(() => {\n    const dispatch = useDispatch<AppDispatchType>()\n    const profile = useSelector(profileSelector)\n    let {userId = 30118} = useParams();\n\n    useEffect(() => {\n        dispatch(getUserProfileInfoTC(+userId))\n        dispatch(getStatusUserTC(+userId))\n\n    }, [])\n\n    return (\n        <>\n            <Profile\n                userId={+userId}\n                profile={profile}\n            />\n        </>\n    )\n})\n\nfunction withRouter<Props extends WithRouterProps>(Component: React.ComponentType<Props>) {\n    function ComponentWithRouterProp(props: Omit<Props, keyof WithRouterProps>) {\n        let location = useLocation();\n        let navigate = useNavigate();\n        let params = useParams();\n        return (\n            <Component\n                {...(props as Props)}\n                location={location}\n                params={params}\n                navigate={navigate}\n            />\n        );\n    }\n\n    return ComponentWithRouterProp;\n}\n\nexport default compose<React.ComponentType>(\n    withRouter\n)(ProfileContainer)\n"],"names":["ProfileStatus","id","mainStatus","useState","editMode","setEditMode","status","setStatus","dispatch","useDispatch","useEffect","className","s","onChange","e","currentTarget","value","autoFocus","onBlur","setStatusUserTC","type","onDoubleClick","Profile","userId","profile","useSelector","postsSelector","getStatusUserTC","useForm","defaultValues","newPostElement","formState","errors","register","handleSubmit","src","photos","large","lostImage","alt","fullName","contacts","vk","href","github","gh","ProfileContainer","React","profileSelector","useParams","getUserProfileInfoTC","compose","Component","props","location","useLocation","navigate","useNavigate","params"],"sourceRoot":""}